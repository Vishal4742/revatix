#!/usr/bin/env node

/**
 * Revatix Testnet Setup Script
 * This script helps configure your project for testnet testing
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function setupTestnet() {
  console.log('üöÄ Revatix Testnet Setup');
  console.log('========================\n');

  // Check if .env.local already exists
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const overwrite = await question('‚ö†Ô∏è  .env.local already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('‚ùå Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('üìù Please provide the following testnet configuration:\n');

  // Collect configuration
  const config = {
    appEnv: await question('Environment (testnet): ') || 'testnet',
    debugMode: await question('Debug mode (true): ') || 'true',
    yellowNetworkUrl: await question('Yellow Network Testnet URL (wss://testnet.yellow.org/ws): ') || 'wss://testnet.yellow.org/ws',
    defaultChain: await question('Default Chain (yellow-testnet): ') || 'yellow-testnet',
    nitroliteAppId: await question('Nitrolite App ID: '),
    nitroliteApiKey: await question('Nitrolite API Key: '),
    supabaseUrl: await question('Supabase Testnet URL: '),
    supabaseAnonKey: await question('Supabase Anon Key: '),
    googleAiKey: await question('Google AI API Key (optional): '),
    emailjsServiceId: await question('EmailJS Service ID (optional): '),
    emailjsTemplateId: await question('EmailJS Template ID (optional): '),
    emailjsPublicKey: await question('EmailJS Public Key (optional): ')
  };

  // Generate .env.local content
  const envContent = `# Revatix Testnet Configuration
# Generated by setup-testnet.js

# Environment
VITE_APP_ENV=${config.appEnv}
VITE_DEBUG_MODE=${config.debugMode}

# Yellow Network Testnet Configuration
VITE_YELLOW_NETWORK_CLEARNODE_URL=${config.yellowNetworkUrl}
VITE_YELLOW_NETWORK_DEFAULT_CHAIN=${config.defaultChain}

# Nitrolite SDK Testnet Configuration
VITE_NITROLITE_APP_ID=${config.nitroliteAppId}
VITE_NITROLITE_API_KEY=${config.nitroliteApiKey}

# Supabase Testnet Database
VITE_SUPABASE_URL=${config.supabaseUrl}
VITE_SUPABASE_ANON_KEY=${config.supabaseAnonKey}

# AI Services
VITE_GOOGLE_AI_API_KEY=${config.googleAiKey}

# Email Services
VITE_EMAILJS_SERVICE_ID=${config.emailjsServiceId}
VITE_EMAILJS_TEMPLATE_ID=${config.emailjsTemplateId}
VITE_EMAILJS_PUBLIC_KEY=${config.emailjsPublicKey}
`;

  // Write .env.local file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ .env.local file created successfully!');
  } catch (error) {
    console.error('‚ùå Error creating .env.local file:', error.message);
    rl.close();
    return;
  }

  // Display next steps
  console.log('\nüìã Next Steps:');
  console.log('==============');
  console.log('1. üîó Configure your wallet for testnet:');
  console.log('   - Add Yellow Network testnet to MetaMask');
  console.log('   - Get test YELLOW tokens from: https://faucet.yellow.org/');
  console.log('');
  console.log('2. üöÄ Start the development server:');
  console.log('   npm run dev');
  console.log('');
  console.log('3. üß™ Test the following features:');
  console.log('   - Wallet connection');
  console.log('   - State channel creation');
  console.log('   - Payment processing');
  console.log('   - VAT refund workflow');
  console.log('   - Payroll processing');
  console.log('');
  console.log('4. üìä Monitor transactions:');
  console.log('   - Yellow Network Explorer: https://explorer.yellow.org/');
  console.log('   - Browser console for logs');
  console.log('');
  console.log('5. üîç Use the State Channel Manager:');
  console.log('   - Click the Activity icon in Token Balance');
  console.log('   - Create and manage state channels');
  console.log('   - Test dispute resolution');

  console.log('\nüéâ Testnet setup complete!');
  console.log('üìñ For detailed testing guide, see TESTNET_SETUP.md');

  rl.close();
}

// Run setup
setupTestnet().catch(console.error);
